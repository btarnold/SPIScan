# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dspace', [dirname(__file__)])
        except ImportError:
            import _dspace
            return _dspace
        if fp is not None:
            try:
                _mod = imp.load_module('_dspace', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dspace = swig_import_helper()
    del swig_import_helper
else:
    import _dspace
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def scan_start(n):
    return _dspace.scan_start(n)
scan_start = _dspace.scan_start

def scan_wait():
    return _dspace.scan_wait()
scan_wait = _dspace.scan_wait

def scan_cancel():
    return _dspace.scan_cancel()
scan_cancel = _dspace.scan_cancel

def startup_dspace():
    return _dspace.startup_dspace()
startup_dspace = _dspace.startup_dspace

def gps_locked():
    return _dspace.gps_locked()
gps_locked = _dspace.gps_locked

def gps_long():
    return _dspace.gps_long()
gps_long = _dspace.gps_long

def gps_lat():
    return _dspace.gps_lat()
gps_lat = _dspace.gps_lat

def scan_done():
    return _dspace.scan_done()
scan_done = _dspace.scan_done

def scan_description(v):
    return _dspace.scan_description(v)
scan_description = _dspace.scan_description

def tiff_name(v):
    return _dspace.tiff_name(v)
tiff_name = _dspace.tiff_name

_dspace.kHdrSize_swigconstant(_dspace)
kHdrSize = _dspace.kHdrSize

_dspace.kCmdPos_swigconstant(_dspace)
kCmdPos = _dspace.kCmdPos

_dspace.kIDPos_swigconstant(_dspace)
kIDPos = _dspace.kIDPos

_dspace.kLenPos_swigconstant(_dspace)
kLenPos = _dspace.kLenPos

_dspace.kDataPos_swigconstant(_dspace)
kDataPos = _dspace.kDataPos

_dspace.kCksumSize_swigconstant(_dspace)
kCksumSize = _dspace.kCksumSize

_dspace.kSyncByte_swigconstant(_dspace)
kSyncByte = _dspace.kSyncByte

_dspace.kCCNoErr_swigconstant(_dspace)
kCCNoErr = _dspace.kCCNoErr

_dspace.kCCError_swigconstant(_dspace)
kCCError = _dspace.kCCError

_dspace.kCCSysInfo_swigconstant(_dspace)
kCCSysInfo = _dspace.kCCSysInfo

_dspace.kCCPinStates_swigconstant(_dspace)
kCCPinStates = _dspace.kCCPinStates

_dspace.kCCPinValues_swigconstant(_dspace)
kCCPinValues = _dspace.kCCPinValues

_dspace.kCCGetSysInfo_swigconstant(_dspace)
kCCGetSysInfo = _dspace.kCCGetSysInfo

_dspace.kCCGetPins_swigconstant(_dspace)
kCCGetPins = _dspace.kCCGetPins

_dspace.kCCSetPins_swigconstant(_dspace)
kCCSetPins = _dspace.kCCSetPins

_dspace.kCCSetPinModes_swigconstant(_dspace)
kCCSetPinModes = _dspace.kCCSetPinModes

_dspace.kCCAnalogReads_swigconstant(_dspace)
kCCAnalogReads = _dspace.kCCAnalogReads

_dspace.kCCSetPWM_swigconstant(_dspace)
kCCSetPWM = _dspace.kCCSetPWM

_dspace.kCCInvalid_swigconstant(_dspace)
kCCInvalid = _dspace.kCCInvalid

_dspace.kNoErr_swigconstant(_dspace)
kNoErr = _dspace.kNoErr

_dspace.kErrUnknownCmd_swigconstant(_dspace)
kErrUnknownCmd = _dspace.kErrUnknownCmd

_dspace.kErrMsgOversize_swigconstant(_dspace)
kErrMsgOversize = _dspace.kErrMsgOversize

_dspace.kErrInvalidPin_swigconstant(_dspace)
kErrInvalidPin = _dspace.kErrInvalidPin

_dspace.kErrOutToInput_swigconstant(_dspace)
kErrOutToInput = _dspace.kErrOutToInput

_dspace.kErrPredefined_swigconstant(_dspace)
kErrPredefined = _dspace.kErrPredefined

_dspace.kErrOddPWM_swigconstant(_dspace)
kErrOddPWM = _dspace.kErrOddPWM

def ard_init(serFile):
    return _dspace.ard_init(serFile)
ard_init = _dspace.ard_init

def ard_startup():
    return _dspace.ard_startup()
ard_startup = _dspace.ard_startup

_dspace.kOnboardLEDPin_swigconstant(_dspace)
kOnboardLEDPin = _dspace.kOnboardLEDPin

_dspace.kPump1Pin_swigconstant(_dspace)
kPump1Pin = _dspace.kPump1Pin

_dspace.kPump2Pin_swigconstant(_dspace)
kPump2Pin = _dspace.kPump2Pin

_dspace.HIGH_swigconstant(_dspace)
HIGH = _dspace.HIGH

_dspace.LOW_swigconstant(_dspace)
LOW = _dspace.LOW

_dspace.INPUT_swigconstant(_dspace)
INPUT = _dspace.INPUT

_dspace.OUTPUT_swigconstant(_dspace)
OUTPUT = _dspace.OUTPUT

def pinMode(pin, mode):
    return _dspace.pinMode(pin, mode)
pinMode = _dspace.pinMode

def digitalWrite(pin, value):
    return _dspace.digitalWrite(pin, value)
digitalWrite = _dspace.digitalWrite

def digitalRead(pin):
    return _dspace.digitalRead(pin)
digitalRead = _dspace.digitalRead

def analogRead(pin):
    return _dspace.analogRead(pin)
analogRead = _dspace.analogRead

def analogWrite(pin, value):
    return _dspace.analogWrite(pin, value)
analogWrite = _dspace.analogWrite

def SendMsg(cmd, transID, p, len):
    return _dspace.SendMsg(cmd, transID, p, len)
SendMsg = _dspace.SendMsg

def HasMessageFor(targID):
    return _dspace.HasMessageFor(targID)
HasMessageFor = _dspace.HasMessageFor

def ReadMessageFor(ID, outCmd, outBuffP, ioBuffSize):
    return _dspace.ReadMessageFor(ID, outCmd, outBuffP, ioBuffSize)
ReadMessageFor = _dspace.ReadMessageFor
# This file is compatible with both classic and new-style classes.


